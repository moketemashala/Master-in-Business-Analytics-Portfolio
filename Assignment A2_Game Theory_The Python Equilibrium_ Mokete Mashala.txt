FIRST CODE
*******************************


# THE FIRST CODE IS FOR WHEN THE USER WANTS TO PLAY, WE PROCEED OTHERWISE WE BID FAREWELL
# Import random package and numpy as np
import random
import numpy as np

# Ask the user if they would like to play a game theory game
user_play = input(prompt = f"""Welcome to the \"Enter the lucrative market in Boston\" Game Theory.
Would you like to play? please answer yes or no: """).lower()

# raise an error if the user does not input yes or no
if user_play != 'no' and user_play !='yes':       
    raise TypeError("You did not input the correct answer of either 'yes' or 'no', try again please!")

#Bid farewell to the user if the user does not want to play
elif user_play == "no":
    print(
"I am sorry that you do not want to play, please come and play next time. Bye! ")

#If the user wants to play then welcome the user, explain the game and ask the user to select the selling price.
elif user_play == "yes":
    user_name = input(prompt = f""" 
I am so happy that you decided to play the game:
What is your name? """).title()

#Print a welcome message and provide a description of the game and the situation
    print(f"""
{"*"*100}
WELCOME TO THE GAME {user_name.upper()}. It's a pleasure to meet you.
{"*"*100}
Here is an overview of the situation:

TThe game involves the entry of a new company (i.e., entrant) into a lucrative market. Currently, 
there is already an established monopolist company (i.e., incumbent) with 100% market share. 
Assume that there is a set total market size for a product that is a necessity which is not
affected by the price levels of the players. The relative market share of each player depends 
on the prices chosen. This will dictate how much profit they each make. 

The price options, market share and profit are shown below and already account marginal costs of 
production, assuming there are no fixed costs. In the case of the entrant, if the company enters 
the market at a high price while the incumbent sells at a low price, there is no incentive for 
customers to shift to the entrantâ€™s product. 
Henceforth, the entrant will not gain any market share, nor make any profits.

The incumbent will lose 40% of the market share if it sells at a higher price 
than the entrant, as consumers will want to shift to buy cheaper products from the entrant.

YOU, {user_name.upper()} represent the entrant. 
You will compete against an incumbent company. You must choose the selling price.
To win you must obtain the maximum market share of 40% and earn $1800 in profits. 
The incumbent will win if it obtains 100% market share with profits of $4000.

If you do well, perhaps this may be the beginning of something great!!! 

Note I=Incumbent, E=Entrant({user_name})

All the best!
  
\t\tINCUMBENT \t\t\t\tENTRANT_{user_name.upper()}
Options\t\tPrice $/t|  Market Share|Profit($)||\tPrice $/t|  Market Share| Profit($)|
{"-"*100}
Both P=$10|\t10 \t |\t 90%\t| 4,500   ||\t 10 \t |\t 10%\t| 550      |
I=9 ,E=10 |\t9 \t |\t 100%\t| 4,000   ||\t 10 \t |\t 0% \t| 0        |
I=10,E=9  |\t10 \t |\t 60%\t| 3,000   ||\t 9  \t |\t 40%\t| 1800     |
Both P=$9 |\t9 \t |\t 90%\t| 3,600   ||\t 9  \t |\t 10%\t| 450      |
    
Summary table of the possible outcomes based on pricing decisions:
    
\t\t\t\t\t\t ENTRANT_{user_name.upper()}
{"-"*100}
\t\t\t\t PROFITS PAYOFFS \t\t\t MARKET SHARE PAYOFFS
\t\t\t low P($9) \t high P($10)  \t\t low P($9) \t high P($10)  
INCUMBENT  low P($9)\t 3600 \ 450 \t 4000 \ 0    \t\t 90% \ 10% \t 100% \ 0%
\t   high P($10)\t 3000 \ 1800 \t 4500 \ 550  \t\t 60% \ 40% \t 90% \ 10%""")
      
    # Create a board game matrix with the profit pay-offs
    # If they cooperate to sell at high price, they will each
    I = np.array([[3600,4000],[3000,4500]])      # A is the row player = Incumbent
    E = np.array([[450,0],[1800,550]])           #B is the column player = Entrant
    
    # Create a matrix pay-offs for the market share  
    I_share = np.array([[90,100],[60,90]])       # A is the row player = Incumbent
    E_share = np.array([[10,0],[40,10]])         #B is the column player = Entrant
    
    
    # Create a dictionary with the results
    profits_payoff = {
                        "(L, L)": (I[0][0], E[0][0]),
                        "(L, H)": (I[1][0], E[1][0]),
                        "(H, L)": (I[0][1], E[0][1]),
                        "(H, H)": (I[1][1], E[1][1])
                    }
   
    # Based on the payoffs and market share calculations. The dominant strategy for both players is low price. 

    # Ask the user to select the price for the product.
    user_price = input(prompt = f"""
What is the price that you would like to sell your product for? 
If you want to sell at high price of $10, select 'H'
If you want to sell at low price of $9, select 'L':   """).upper()
    
    #Raise an error flag if the user does not input the one of the correct options.
    if user_price != "L" and user_price != "H":       
        raise TypeError("You did not input the correct answer of either 'L' or 'H', try again please!") 

    # Using a random value between 0 and 1, create a random value for computer to play
    # The computer will choose either a low price or a high price
    computer_price = random.randint(0,1) # 0 = L and 1 = H

    # Below, the four different payoff's will be checked to see if the user maximized profits
    # The first two refer to the option where the user_price 
    if user_price == "L":
        if computer_price == 0:
            user_results = profits_payoff["(L, L)"][1]
            computer_results = profits_payoff[("(L, L)")][0]
            print(f"""
{"*"*100}
You have decided to sell at a low price! The Incumbent also decided to sell at low price.
Your profits are ${user_results}, you took {E_share[0][0]}% of market share.
The Incumbent profits are ${computer_results}, with market share reduced to {I_share[0][0]}%.
Not bad! You are off to a good start""")
        # if user chooses low price and computer chooses high price
        elif computer_price == 1:
            user_results = profits_payoff["(L, H)"][1]
            computer_results = profits_payoff[("(L, H)")][0]
            print(f"""
{"*"*100}
You have decided to sell at a low price! The Incumbent decided to sell at high price.
Your profits are ${user_results}, you have mazimized your market share at {E_share[1][0]}%.
The Incumbent profits are ${computer_results}, with market share reduced to {I_share[1][0]}%.
This is excellent, the Incumbent helped you earn your highest possible profits!""")    
    
    if user_price == "H":
        if computer_price == 1:
            user_results = profits_payoff["(H, H)"][1]
            computer_results = profits_payoff[("(H, H)")][0]
            print(f"""
{"*"*100}
You have decided to sell at a high price! The Incumbent also decided to sell at high price.
Your profits are ${user_results}, with {E_share[1][1]}% market share.
The Incumbent profits are ${computer_results}, with reduced market share of {I_share[1][1]}%.
The decision of the Incumbent saved you from making ${E[0][1]} profit!""")

        elif computer_price == 0:
            user_results = profits_payoff["(H, L)"][1]
            computer_results = profits_payoff[("(H, L)")][0]
            print(f"""
{"*"*100}
You have decided to sell at a high price! However, the Incumbent decided to sell at low price.
Your profits are ${user_results}, with {E_share[0][1]}% market share.
The Incumbent profits are ${computer_results}, with retained {I_share[0][1]}% market share.
This was not a good decision at all, unfortunately you have to rethink your strategy!""")   

    # Declare the winner
    # The winner is chosen to be the one who maximises the market share. 
    # For the Incumbent, a win is if they can maintain a 100% market share.
    # For the Entrant, a win is if they can get the maximum 20% market share.
    # The share of 90% and 10% is taken as a tie.

    if user_results == profits_payoff["(L, L)"][1] and computer_results == profits_payoff[("(L, L)")][0]:
        print(f"""
{"*"*100}
It's a tie, by setting your price {user_price} you managed to gain only {E_share[0][0]}% market share""")  

    
    elif user_results == profits_payoff["(H, H)"][1] and computer_results == profits_payoff[("(H, H)")][0]:
        print(f"""
{"*"*100}
It's a tie, by setting your price {user_price} you managed to gain only {E_share[1][1]}% market share""")     
    
    
    elif user_results == profits_payoff["(L, H)"][1] and computer_results == profits_payoff[("(L, H)")][0]:
        print(f"""
{"*"*100}
You won! You maximized your profits at {user_price} price and gained {E_share[1][0]}% market share!""")
       
    else:
        print(f"""
{"*"*100}
You lost! You did not gain any market share by choosing a {user_price} price!""")






***********************************
SECOND CODE
***********************************

# THE SECOND CODE IS FOR WHEN THE USER DOES NOT WANT TO PLAY, THE COMPUTER WILL PLAY AGAINST ITSELF
# Import random package and numpy as np
import random
import numpy as np

# Ask the user if they would like to play a game theory game
user_play = input(prompt = f"""Welcome to the \"Enter the lucrative market in Boston\" Game Theory.
Would you like to play? please answer yes or no: """).lower()

# raise an error if the user does not input yes or no
if user_play != 'no' and user_play !='yes':       
    raise TypeError("You did not input the correct answer of either 'yes' or 'no', try again please")

#*********************************************************************************************
#************BELOW IS THE CODE FOR IF THE USER DOES NOT WANT TO PLAY: COMPUTER TO PLAY********                    
# ********************************************************************************************
       
#Bid farewell to the user if the user does not want to play and INITIATE THE COMPUTER AGAINST COMPUTER GAME
elif user_play == "no":
    print(f"""
You have decided not to play, the computer will play against itself, enjoy the show! 

The game involves the entry of a new company (i.e., entrant) into a lucrative market. Currently, 
there is already an established monopolist company (i.e., incumbent) with 100% market share. 
Assume that there is a set total market size for a product that is a necessity which is not
affected by the price levels of the players. The relative market share of each player depends 
on the prices chosen. This will dictate how much profit they each make. 

The price options, market share and profit are shown below and already account marginal costs of 
production, assuming there are no fixed costs. In the case of the entrant, if the company enters 
the market at a high price while the incumbent sells at a low price, there is no incentive for 
customers to shift to the entrantâ€™s product. 
Henceforth, the entrant will not gain any market share, nor make any profits.

The incumbent will lose 40% of the market share if it sells at a higher price 
than the entrant, as consumers will want to shift to buy cheaper products from the entrant.

The options available for either players is shown below:

\t\tINCUMBENT \t\t\t\tENTRANT
Options\t\tPrice $/t|  Market Share|Profit($)||\tPrice $/t|  Market Share| Profit($)|
{"-"*100}
Both P=$10|\t10 \t |\t 90%\t| 4,500   ||\t 10 \t |\t 10%\t| 550      |
I=9 ,E=10 |\t9 \t |\t 100%\t| 4,000   ||\t 10 \t |\t 0% \t| 0        |
I=10,E=9  |\t10 \t |\t 60%\t| 3,000   ||\t 9  \t |\t 40%\t| 1800     |
Both P=$9 |\t9 \t |\t 90%\t| 3,600   ||\t 9  \t |\t 10%\t| 450      |
    
Summary table of the possible outcomes based on pricing decisions:
    
\t\t\t\t\t\t ENTRANT
{"-"*100}
\t\t\t\t PROFITS PAYOFFS \t\t\t MARKET SHARE PAYOFFS
\t\t\t low P($9) \t high P($10)  \t\t low P($9) \t high P($10)  
INCUMBENT  low P($9)\t 3600 \ 450 \t 4000 \ 0    \t\t 90% \ 10% \t 100% \ 0%
\t   high P($10)\t 3000 \ 1800 \t 4500 \ 550  \t\t 60% \ 40% \t 90% \ 10%""")

    # Create a board game matrix with the profit pay-offs
    I = np.array([[3600,4000],[3000,4500]])      # A is the row player = Incumbent
    E = np.array([[450,0],[1800,550]])           #B is the column player = Entrant
    
    # Create a matrix pay-offs for the market share  
    I_share = np.array([[90,100],[60,90]])       # A is the row player = Incumbent
    E_share = np.array([[10,0],[40,10]])         #B is the column player = Entrant
        
    # Create a dictionary with the results
    profits_payoff = {
                        "(L, L)": (I[0][0], E[0][0]),
                        "(L, H)": (I[1][0], E[1][0]),
                        "(H, L)": (I[0][1], E[0][1]),
                        "(H, H)": (I[1][1], E[1][1])
                    }

    #Initiate and empty list to store the ENTRANT'S market share results and profits
    market_share_entrant = []
    profits_entrant = []
    entrant_final = zip(market_share_entrant, profits_entrant)

    #Initiate and empty list to store the INCUMBENT'S market share results and profits
    market_share_incumbent = []
    profits_incumbent = []
    incumbent_final = zip(market_share_incumbent, profits_incumbent)
    
    # initiate a list to store the rounds for each game
    rounds = []  
    
    # create a zip object containing the rounds and results
    entrant_final_round = zip(rounds,entrant_final )   
    incumbent_final_round = zip(rounds, incumbent_final)
        
    # Initiate the loop to play the game 5 times  
    for i in range(1,6):
        
        # for both players, 0 = low price and 1 = high price
        # define the round of each game to know the choice selected and associated payoffs
        round_game = i             
        
        #User defined function to generate incumbent price selections based on strategy
        #strategy of incumbent is to randomly choose LOW 60% of the time
        def inc_rand():
            price = random.randint(1,5)
            if price > 3:
                return 1
            else:
                return 0
        
        incumbent_price = inc_rand()   #set the incumbent price to the randomly selected price

        #user defined function to generate entrant price selections based on strategy
        #strategy of entrant is to always do the opposite of what the incumbent does
        def ent_rand():
            if incumbent_price == 1:
                return 0
            else:
                return 1
        
        entrant_price = ent_rand()   #set the incumbent price to the randomly selected price
        
        # With the computer playing game against itself, the results fo each round wiil be capture
        # if both players select low price
        if entrant_price == 0:
            if incumbent_price == 0:
                entrant_results = profits_payoff["(L, L)"][1]
                incumbent_results = profits_payoff[("(L, L)")][0]
                rounds.append('Round' + " "+ str(round_game))      # add the round number to total rounds
                print(f"""
{"*"*100}
Round {round_game}:
Entrant chosen price: {entrant_price}, Incumbent chosen price: {incumbent_price}
Note 0 = Low price, 1 = High price 

Entrant profit is: ${entrant_results}, Entrant market share is: {E_share[0][0]}%.
Incumbent profits is:$ {incumbent_results}, Incumbent market share is: {I_share[0][0]}%.""")

            # if entrant select low and incumbent select high
            elif incumbent_price == 1:
                entrant_results = profits_payoff["(L, H)"][1]
                incumbent_results = profits_payoff[("(L, H)")][0]
                rounds.append('Round' + " "+ str(round_game))        # add the round number to total rounds
                print(f"""
{"*"*100}
Round {round_game}:
Entrant chosen price: {entrant_price}, Incumbent chosen price: {incumbent_price}
Note 0 = Low price, 1 = High price 

Entrant profit is: ${entrant_results}, Entrant market share is: {E_share[1][0]}%.
Incumbent profits is:${incumbent_results}, Incumbent market share is: {I_share[1][0]}%.""")    
    
        if entrant_price == 1:
            if incumbent_price == 1:
                entrant_results = profits_payoff["(H, H)"][1]
                incumbent_results = profits_payoff[("(H, H)")][0]
                rounds.append('Round' + " "+ str(round_game))        # add the round number to total rounds
                print(f"""
{"*"*100}
Round {round_game}:
Entrant chosen price: {entrant_price}, Incumbent chosen price: {incumbent_price}
Note 0 = Low price, 1 = High price 

Entrant profit is: ${entrant_results}, Entrant market share is: {E_share[1][1]}%.
Incumbent profits: ${incumbent_results}, Incumbent market share is: {I_share[1][1]}%.""")

            elif incumbent_price == 0:
                entrant_results = profits_payoff["(H, L)"][1]
                incumbent_results = profits_payoff[("(H, L)")][0]
                rounds.append('Round' + " "+ str(round_game))       # add the round number to total rounds
                print(f"""
{"*"*100}
Round {round_game}:
Entrant chosen price: {entrant_price}, Incumbent chosen price: {incumbent_price}
Note 0 = Low price, 1 = High price 

Entrant profit is: ${entrant_results}, Entrant market share is: {E_share[0][1]}%.
Incumbent profits: ${incumbent_results}, Incumbent market share is: {I_share[0][1]}%.""")   

        # The results of each round are captured. As the rounds progresses, the market share and profits of
        # each round are appended to the previous rounds until all the results are reported together in the
        # final round.

        if entrant_results == profits_payoff["(L, L)"][1] and incumbent_results == profits_payoff[("(L, L)")][0]:
            market_share_entrant.append(E_share[0][0])
            profits_entrant.append(E[0][0])
            entrant_zip = zip(market_share_entrant, profits_entrant)    #combine the results for market share & profit
           
            market_share_incumbent.append(I_share[0][0])
            profits_incumbent.append(I[0][0])
            incumbent_zip = zip(market_share_incumbent, profits_incumbent) #combine the market share & profit results
            print(f""" 
Results up to this round are: 
Entrant: {list(entrant_zip)}
Incumbent: {list(incumbent_zip)}""")
    
        elif entrant_results == profits_payoff["(H, H)"][1] and incumbent_results == profits_payoff[("(H, H)")][0]:
            market_share_entrant.append(E_share[1][1])
            profits_entrant.append(E[1][1])
            entrant_zip = zip(market_share_entrant, profits_entrant)     #combine the market share & profit results
           
            market_share_incumbent.append(I_share[1][1])
            profits_incumbent.append(I[1][1])
            incumbent_zip = zip(market_share_incumbent, profits_incumbent) #combine the market share & profit results
            print(f""" 
Results up to this round are:
Entrant: {list(entrant_zip)}
Incumbent: {list(incumbent_zip)}""")
    
        elif entrant_results == profits_payoff["(L, H)"][1] and incumbent_results == profits_payoff[("(L, H)")][0]:
            market_share_entrant.append(E_share[1][0])
            profits_entrant.append(E[1][0])
            entrant_zip = zip(market_share_entrant, profits_entrant)    #combine the market share & profit results
           
            market_share_incumbent.append(I_share[1][0])
            profits_incumbent.append(I[1][0])
            incumbent_zip = zip(market_share_incumbent, profits_incumbent)  #combine the market share & profit results
            print(f""" 
Results up to this round are:
Entrant: {list(entrant_zip)}
Incumbent: {list(incumbent_zip)}""")
            
        else:
            market_share_entrant.append(E_share[0][1])
            profits_entrant.append(E[0][1])
            entrant_zip = zip(market_share_entrant, profits_entrant)   #combine the market share & profit results
           
            market_share_incumbent.append(I_share[0][1])
            profits_incumbent.append(I[0][1])
            incumbent_zip = zip(market_share_incumbent, profits_incumbent)  #combine the market share & profit results
            print(f""" 
Results up to this round are:
Entrant: {list(entrant_zip)}
Incumbent: {list(incumbent_zip)}""")
 
    print(f"""
{"*"*100}
MARKET SHARE AND PROFITS PAYOFFS FOR ALL ROUNDS!!!
{"*"*100}
Entrant: {list(entrant_final_round)}
Incumbent: {list(incumbent_final_round)}  """) 

    # calculate the % profits obtained out of the maximum possible if entrant won all the rounds
    # where maximum possible profits is 1800*5 = $9000 for entrant
    sum_profits_ent = np.sum(profits_entrant)
    max_possible_profits_ent = E[1][0]*5
    percent_entr = round(sum_profits_ent / max_possible_profits_ent * 100, 2)
    
    # calculate the % profits obtained out of the maximum possible if incumbent won all the rounds
    # where maximum possible profits is 4500*5 = $22500 for incumbent   
    
    sum_profits_inc = np.sum(profits_incumbent)
    max_possible_profits_inc = I[1][1]*5
    percent_inc = round(sum_profits_inc / max_possible_profits_inc * 100 , 2)
        
    # Declare the winner. The WINNER is the player that manages to obtain their highest possible 
    # market share twice or more that is if entrace has 40% market share twice in five rounds
    # or incumbent get 100% market share twice in five rounds, otherwise it is a tie
     
    count_40 = 0     #count the number of times that the entrant obtained 40%
    count_100 = 0    #count the number of times that the incumbent obtained 100%
 
    for entrant_share in list(market_share_entrant):
        if entrant_share == 40:
            count_40 += 1    # counter for the number of times that the entrant obtains 40% market share
 
    for incumbent_share in list(market_share_incumbent):
        if incumbent_share == 100:
            count_100 += 1     # counter for the number of times that the incumbent obtains 100% market shar
       
    if count_40 > count_100:
        print(f""" 
{"*"*100}
DRUM ROLLING!!!
{"*"*100}
The entrant obtained 40% market share {count_40} times and earned {percent_entr}% of maximum profits.
The incumbent obtained 100% market share {count_100} times and only earned {percent_inc}% of maximum profits.
The ENTRANT WON!""")
        
    elif count_100 > count_40:
        print(f""" 
{"*"*100}
DRUM ROLLING!!!
{"*"*100}
The entrant obtained 40% market share {count_40} times and only earned {percent_entr}% of maximum profits.
The incumbent obtained 100% market share {count_100} times and earned {percent_inc}% of maximum profits.
The INCUMBENT WON!""")
    
    else:
        print(f""" 
{"*"*100}
DRUM ROLLING!!!
{"*"*100}
The entrant obtained 40% market share {count_40} times with {percent_entr}% of maximum profits.
The incumbent obtained 100% market share {count_100} times with {percent_inc}% of maximum profits.
It is a TIE""")

# *********************************************************************************************         
#   ***************** BELOW IS THE CODE FOR IF THE USER WANTS TO PLAY ************************                     
# ********************************************************************************************* 

#If the user wants to play then welcome the user, explain the game and ask the user to select the selling price.
elif user_play == "yes":
    user_name = input(prompt = f""" 
I am so happy that you decided to play the game:
What is your name? """).title()
    
    print(f"""
****************************************************************************************
WELCOME TO THE GAME {user_name.upper()}. It's a pleasure to meet you.
****************************************************************************************
Here is an overview of the situation:You are a new Entrant into a lucrative market in Boston. 
You will compete against an Incumbent company who has a very strong market share.
You have to choose the selling price of your product.
Depending on the price you choose, you will be able to maximize your profits and gain market share.
Your goal is to maximize your profits by gaining the highest market share.
If you do well, perhaps this may be the beggining of something great!!! Note I=Incumbent, E=Entrant({user_name})
    
\t\tINCUMBENT \t\t\t\tENTRANT_{user_name.upper()}
Options\t\tPrice $/t|  Market Share|Profit($)||\tPrice $/t|  Market Share| Profit($)|
---------------------------------------------------------------------------------------------------
Both P=$10|\t10 \t |\t 90%\t| 4,500   ||\t 10 \t |\t 10%\t| 550      |
I=9 ,E=10 |\t9 \t |\t 100%\t| 4,000   ||\t 10 \t |\t 0% \t| 0        |
I=10,E=9  |\t10 \t |\t 60%\t| 3,000   ||\t 9  \t |\t 40%\t| 1800     |
Both P=$9 |\t9 \t |\t 90%\t| 3,600   ||\t 9  \t |\t 10%\t| 450      |
    
Summary table of the possible outcomes based on pricing decisions:
    
\t\t\t\t\t\t ENTRANT_{user_name.upper()}
---------------------------------------------------------------------------------------------------
\t\t\t\t PROFITS PAYOFFS \t\t\t MARKET SHARE PAYOFFS
\t\t\t low P($9) \t high P($10)  \t\t low P($9) \t high P($10)  
INCUMBENT  low P($9)\t 3600 \ 450 \t 4000 \ 0    \t\t 90% \ 10% \t 100% \ 0%
\t   high P($10)\t 3000 \ 1800 \t 4500 \ 550  \t\t 60% \ 40% \t 90% \ 10%""")
      
    # Create a board game matrix with the profit pay-offs
    I = np.array([[3600,4000],[3000,4500]])     # A is the row player = Incumbent
    E = np.array([[450,0],[1800,550]])        #B is the column player = Entrant
    
    # Create a matrix pay-offs for the market share  
    I_share = np.array([[90,100],[60,90]])       # A is the row player = Incumbent
    E_share = np.array([[10,0],[40,10]])         #B is the column player = Entrant
    
    # Create a dictionary with the results
    profits_payoff = {
                        "(L, L)": (I[0][0], E[0][0]),
                        "(L, H)": (I[1][0], E[1][0]),
                        "(H, L)": (I[0][1], E[0][1]),
                        "(H, H)": (I[1][1], E[1][1])
                      }
    # Based on the payoffs and market share calculations:
    #The dominant strategy for the Entant  and incument is always low price. 
    
    # Ask the user to select the price for the product.
    user_price = input(prompt = f"""
What is the price that you would like to sell your product for? 
If you want to sell at high price of $10, select 'H'
If you want to sell at low price of $9, select 'L':   """).upper()
    
    #Raise an error flag if the user does not input the one of the correct options.
    if user_price != "L" and user_price != "H":       
        raise TypeError("You did not input the correct answer of either 'L' or 'H', try again please!") 

    # Using a random value between 0 and 1, create a random value for computer to play
    # The computer will choose either a low price or a high price
    computer_price = random.randint(0,1) # 0 = L and 1 = H

    # Below, the four different payoff's will be checked to see if the user maximized profits
    # The first two refer to the option where the user_price 
    if user_price == "L":
        if computer_price == 0:
            user_results = profits_payoff["(L, L)"][1]
            computer_results = profits_payoff[("(L, L)")][0]
            print(f"""
You have decided to sell at a low price! The Incumbent also decided to sell at low price.
Your profits are ${user_results}, you took {E_share[0][0]}% of market share.
The Incumbent profits are ${computer_results}, with market share reduced to {I_share[0][0]}%.
Not bad! You are off to a good start""")

        elif computer_price == 1:
            user_results = profits_payoff["(L, H)"][1]
            computer_results = profits_payoff[("(L, H)")][0]
            print(f"""
You have decided to sell at a low price! The Incumbent decided to sell at high price.
Your profits are ${user_results}, you have mazimized your market share at {E_share[1][0]}%.
The Incumbent profits are ${computer_results}, with market share reduced to {I_share[1][0]}%.
This is excellent, the Incumbent helped you earn your highest possible profits!""")    
    
    if user_price == "H":
        if computer_price == 1:
            user_results = profits_payoff["(H, H)"][1]
            computer_results = profits_payoff[("(H, H)")][0]
            print(f"""
You have decided to sell at a high price! The Incumbent also decided to sell at high price.
Your profits are ${user_results}, with {E_share[1][1]}% market share.
The Incumbent profits are ${computer_results}, with reduced market share of {I_share[1][1]}%.
The decision of the Incumbent saved you from making ${E[0][1]} profit!""")

        elif computer_price == 0:
            user_results = profits_payoff["(H, L)"][1]
            computer_results = profits_payoff[("(H, L)")][0]
            print(f"""
You have decided to sell at a high price! However, the Incumbent decided to sell at low price.
Your profits are ${user_results}, with {E_share[0][1]}% market share.
The Incumbent profits are ${computer_results}, with retained {I_share[0][1]}% market share.
This was not a good decision at all, unfortunately you have to rethink your strategy!""")   

    # Declare the winner: The winner is chosen to be the one who maximises the market share. 
    # A win is 100% market share for incumbent and 40% market share for entrant.
    #The share of 90% and 10% is taken as a tie.

    if user_results == profits_payoff["(L, L)"][1] and computer_results == profits_payoff[("(L, L)")][0]:
        print(f"""
{"*"*100}
DRUM ROLLING!!!
{"*"*100}
It's a TIE, by setting your price {user_price} you managed to gain only {E_share[0][0]}% market share!
You earned ${profits_payoff["(L, L)"][1]}, your competitor earned ${profits_payoff[("(L, L)")][0]}""")  
    
    elif user_results == profits_payoff["(H, H)"][1] and computer_results == profits_payoff[("(H, H)")][0]:
        print(f"""
{"*"*100}
DRUM ROLLING!!!
{"*"*100}
It's a TIE, by setting your price {user_price} you managed to gain only {E_share[1][1]}% market share!
You earned ${profits_payoff["(H, H)"][1]}, your competitor earned ${profits_payoff[("(H, H)")][0]}""")    
    
    elif user_results == profits_payoff["(L, H)"][1] and computer_results == profits_payoff[("(L, H)")][0]:
        print(f"""
{"*"*100}
DRUM ROLLING!!!
{"*"*100}
You WON! You maximized your profits at {user_price} price and gained {E_share[1][0]}% market share!
You earned ${profits_payoff["(L, H)"][1]}, your competitor earned ${profits_payoff[("(L, H)")][0]}""")

    else:
        print(f"""
{"*"*100}
DRUM ROLLING!!!
{"*"*100}
You LOST! You did not gain any market share by choosing a {user_price} price!
You earned ${profits_payoff["(H, L)"][1]}, your competitor earned ${profits_payoff[("(H, L)")][0]}""")
